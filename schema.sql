DO $$
BEGIN
-- Terminate all connections
IF EXISTS (SELECT 1 FROM pg_database WHERE datname = 'booru') THEN
    REVOKE CONNECT ON DATABASE booru FROM public;
    PERFORM pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'booru';
END IF;
END$$ LANGUAGE plpgsql;

-- Drop and recreate database/schema
DROP DATABASE IF EXISTS booru;
CREATE DATABASE booru WITH OWNER = 'root' ENCODING = 'UTF8';
\connect booru;
CREATE SCHEMA booru;


-- Create tables


DROP TABLE IF EXISTS booru.IMAGE_TAG;
DROP INDEX IF EXISTS IMAGE_TAG$TAG_ID;
DROP INDEX IF EXISTS IMAGE_TAG$IMAGE_ID;
CREATE TABLE booru.IMAGE_TAG (
    IMAGE_ID INT NOT NULL,
    TAG_ID   INT NOT NULL,
    PRIMARY KEY(IMAGE_ID, TAG_ID)
);
CREATE INDEX IMAGE_TAG$IMAGE_ID ON booru.IMAGE_TAG (
    IMAGE_ID
);
CREATE INDEX IMAGE_TAG$TAG_ID ON booru.IMAGE_TAG (
    TAG_ID
);

DROP TABLE IF EXISTS booru.IMAGE;
DROP INDEX IF EXISTS IMAGE$UPLOADER_ID;
CREATE TABLE booru.IMAGE (
    ID            INT NOT NULL PRIMARY KEY,
    UPLOADER_ID   INT NULL,
    DESCRIPTION   TEXT NOT NULL,
    UPVOTES       INT NOT NULL,
    DOWNVOTES     INT NOT NULL,
    FAVES         INT NOT NULL,
    SCORE         INT NOT NULL,
    COMMENT_COUNT INT NOT NULL,
    CREATED_AT    TIMESTAMP NOT NULL,
    UPDATED_AT    TIMESTAMP NOT NULL,
    FIRST_SEEN_AT TIMESTAMP NOT NULL,
    WIDTH         INT NOT NULL,
    HEIGHT        INT NOT NULL,
    ASPECT_RATIO  DECIMAL NOT NULL
);
CREATE INDEX IMAGE$UPLOADER_ID ON booru.IMAGE (
    UPLOADER_ID
);

DROP TABLE IF EXISTS booru.IMAGE_DUPLICATE;
DROP INDEX IF EXISTS IMAGE_DUPLICATE$IMAGE_ID;
CREATE TABLE booru.IMAGE_DUPLICATE (
    IMAGE_ID        INT NOT NULL PRIMARY KEY,
    DUPLICATE_OF_ID INT NOT NULL,
    UPLOADER_ID     INT NULL,
    CREATED_AT      TIMESTAMP NOT NULL,
    UPDATED_AT      TIMESTAMP NOT NULL,
    FIRST_SEEN_AT   TIMESTAMP NOT NULL
);
CREATE INDEX IMAGE_DUPLICATE$IMAGE_ID ON booru.IMAGE_DUPLICATE (
    IMAGE_ID
);

DROP TABLE IF EXISTS booru.IMAGE_DELETION;
DROP INDEX IF EXISTS IMAGE_DELETION$IMAGE_ID;
CREATE TABLE booru.IMAGE_DELETION (
    IMAGE_ID        INT NOT NULL PRIMARY KEY,
    UPLOADER_ID     INT NULL,
    DELETION_REASON TEXT NOT NULL,
    CREATED_AT      TIMESTAMP NOT NULL,
    UPDATED_AT      TIMESTAMP NOT NULL,
    FIRST_SEEN_AT   TIMESTAMP NOT NULL
);
CREATE INDEX IMAGE_DELETION$IMAGE_ID ON booru.IMAGE_DELETION (
    IMAGE_ID
);

DROP TABLE IF EXISTS booru.IMAGE_COMMENT;
DROP INDEX IF EXISTS IMAGE_COMMENT$IMAGE_ID;
DROP INDEX IF EXISTS IMAGE_COMMENT$AUTHOR_ID;
CREATE TABLE booru.IMAGE_COMMENT (
    ID        INT NOT NULL PRIMARY KEY,
    IMAGE_ID  INT NOT NULL,
    AUTHOR    TEXT NULL,
    BODY      TEXT NOT NULL,
    POSTED_AT TIMESTAMP NOT NULL,
    DELETED   BOOLEAN NOT NULL
);
CREATE INDEX IMAGE_COMMENT$IMAGE_ID ON booru.IMAGE_COMMENT (
    IMAGE_ID
);
CREATE INDEX IMAGE_COMMENT$AUTHOR_ID ON booru.IMAGE_COMMENT (
    AUTHOR_ID NULLS LAST
);

DROP TABLE IF EXISTS booru.IMAGE_TAG;
DROP INDEX IF EXISTS IMAGE_TAG$TAG_ID;
CREATE TABLE booru.IMAGE_TAG (
    IMAGE_ID INT NOT NULL,
    TAG_ID   INT NOT NULL,
    PRIMARY KEY (IMAGE_ID, TAG_ID)
);
CREATE INDEX IMAGE_TAG$TAG_ID ON booru.IMAGE_TAG (
    TAG_ID
);

DROP TABLE IF EXISTS booru.USER;
DROP INDEX IF EXISTS USER$NAME;
DROP INDEX IF EXISTS USER$ROLE;
CREATE TABLE booru.USER (
    ID            INT NOT NULL PRIMARY KEY,
    NAME          TEXT NOT NULL,
    DESCRIPTION   TEXT NULL,
    ROLE          TEXT NOT NULL,
    CREATED_AT    TIMESTAMP NOT NULL,
    COMMENT_COUNT INT NOT NULL,
    UPLOADS_COUNT INT NOT NULL,
    POST_COUNT    INT NOT NULL,
    TOPIC_COUNT   INT NOT NULL
);
CREATE INDEX USER$NAME ON booru.USER (
    NAME
);
CREATE INDEX USER$ROLE ON booru.USER (
    ROLE
);

DROP TABLE IF EXISTS booru.USER_AWARD;
DROP INDEX IF EXISTS USER_AWARD$USER_ID;
CREATE TABLE booru.USER_AWARD (
    ID      INT NOT NULL PRIMARY KEY,
    USER_ID INT NOT NULL,
    TITLE   TEXT NOT NULL,
    LABEL   TEXT NOT NULL,
    DATE    TIMESTAMP NOT NULL
);
CREATE INDEX USER_AWARD$USER_ID ON booru.USER_AWARD (
    USER_ID
);

DROP TABLE IF EXISTS booru.USER_LINK;
CREATE TABLE booru.USER_LINK (
    USER_ID INT NOT NULL,
    TAG_ID  INT NOT NULL,
    DATE    TIMESTAMP NOT NULL,
    STATE   TEXT NOT NULL,
    PRIMARY KEY(USER_ID, TAG_ID, DATE)
);

DROP TABLE IF EXISTS booru.USER_FAVORITE;
DROP INDEX IF EXISTS USER_FAVORITE$IMAGE_ID;
CREATE TABLE booru.USER_FAVORITE (
    USER_ID  INT NOT NULL,
    IMAGE_ID INT NOT NULL,
    PRIMARY KEY (USER_ID, IMAGE_ID)
);
CREATE INDEX USER_FAVORITE$IMAGE_ID ON booru.USER_FAVORITE (
    IMAGE_ID
);

DROP TABLE IF EXISTS booru.TAG;
DROP INDEX IF EXISTS TAG$NAME;
DROP INDEX IF EXISTS TAG$ALIASED_TO_ID;
CREATE TABLE booru.TAG (
    ID                INT NOT NULL PRIMARY KEY,
    NAME              TEXT NOT NULL,
    SLUG              TEXT NOT NULL,
    DESCRIPTION       TEXT NOT NULL,
    SHORT_DESCRIPTION TEXT NOT NULL,
    ALIASED_TO_ID     INT NULL,
    CATEGORY          TEXT NULL,
    SPOILER_IMAGE     TEXT NULL
);
CREATE INDEX TAG$NAME ON booru.TAG (
    NAME
);
CREATE INDEX TAG$ALIASED_TO_ID ON booru.TAG (
    ALIASED_TO_ID
);

DROP TABLE IF EXISTS booru.TAG_IMPLICATION;
DROP INDEX IF EXISTS TAG_IMPLICATION$IMPLIED_TAG_ID;
CREATE TABLE booru.TAG_IMPLICATION (
    TAG_ID INT NOT NULL,
    IMPLIED_TAG_ID INT NOT NULL,
    PRIMARY KEY (TAG_ID, IMPLIED_TAG_ID)
);
CREATE INDEX TAG_IMPLICATION$IMPLIED_TAG_ID ON booru.TAG_IMPLICATION (
    IMPLIED_TAG_ID
);


GRANT CONNECT ON DATABASE booru TO public;
